@implements IDisposable

<RadzenCard Style="min-width:300px; max-width:650px; width: 100%">
    @if(ToolBoxes != null)
    {
        @RenderToolBoxes()
    }
</RadzenCard>

@code{
    private List<IDisposable> _disposables = new();

    [Parameter]
    public IEnumerable<ToolDescriptor>? ToolBoxes { get; set; }

    [Parameter]
    public EventCallback<ToolBlockInstance> BlockGenerated { get; set; }

    private RenderFragment RenderToolBoxes() => builder =>
    {
        foreach(var toolBox in ToolBoxes!)
        {
            builder.OpenComponent(0, toolBox.ToolType);
            builder.AddComponentReferenceCapture(1, r =>
            {
                var toolBoxComponent = (IToolBox)r;

                var disposable = toolBoxComponent.BlockGenerated.Subscribe(fragment =>
                {
                    BlockGenerated.InvokeAsync(fragment);
                });

                _disposables.Add(disposable);
            });
            builder.CloseComponent();
        }
    };

    public void Dispose() => _disposables.ForEach(d => d.Dispose());
}